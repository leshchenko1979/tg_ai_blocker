import logging

from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from ..common.bot import bot
from ..common.mp import mp
from ..common.utils import config
from ..database import get_admin_credits, get_pool, get_referrer
from .dp import dp

logger = logging.getLogger(__name__)

REFERRAL_COMMISSION = config["referral_program"]["rewards"]["commission"]


@dp.message(Command("buy"))
async def handle_buy_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –∑–≤–µ–∑–¥
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="100 –∑–≤–µ–∑–¥ üí´", callback_data="buy_stars:100"),
                InlineKeyboardButton(text="500 –∑–≤–µ–∑–¥ ‚≠ê", callback_data="buy_stars:500"),
            ],
            [
                InlineKeyboardButton(
                    text="1000 –∑–≤–µ–∑–¥ üåü", callback_data="buy_stars:1000"
                ),
                InlineKeyboardButton(
                    text="5000 –∑–≤–µ–∑–¥ üå†", callback_data="buy_stars:5000"
                ),
            ],
        ]
    )

    # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏
    mp.track(message.from_user.id, "payment_menu_opened")

    await message.reply(
        "üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        "‚Ä¢ 100 –∑–≤–µ–∑–¥ - –±–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç\n"
        "‚Ä¢ 500 –∑–≤–µ–∑–¥ - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n"
        "‚Ä¢ 1000 –∑–≤–µ–∑–¥ - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø\n"
        "‚Ä¢ 5000 –∑–≤–µ–∑–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞\n\n"
        "üí° –ß–µ–º –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ, —Ç–µ–º –¥–æ–ª—å—à–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã!\n\n"
        "üì¢ [–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–æ–µ–∫—Ç–∞](https://t.me/ai_antispam)",
        reply_markup=keyboard,
    )


@dp.callback_query(F.data.startswith("buy_stars:"))
async def handle_buy_stars_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    """
    await callback.answer()

    stars_amount = int(callback.data.split(":")[1])

    # –¢—Ä–µ–∫–∏–Ω–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
    mp.track(
        callback.from_user.id,
        "payment_package_selected",
        {"stars_amount": stars_amount},
    )

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–ó–≤–µ–∑–¥—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞",
        description=f"–ü–æ–∫—É–ø–∫–∞ {stars_amount} –∑–≤–µ–∑–¥ –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –æ—Ç —Å–ø–∞–º–∞",
        payload=f"Stars purchase:{stars_amount}",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label=f"{stars_amount} –∑–≤–µ–∑–¥", amount=stars_amount)],
    )


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    admin_id = message.from_user.id
    stars_amount = message.successful_payment.total_amount

    try:
        pool = await get_pool()
        async with pool.acquire() as conn:
            await conn.execute(
                "CALL process_successful_payment($1, $2, $3)",
                admin_id,
                stars_amount,
                REFERRAL_COMMISSION / 100,
            )

        # Update Mixpanel profile with new credit balance
        new_balance = await get_admin_credits(admin_id)
        mp.people_set(
            admin_id,
            {
                "credits": new_balance,
                "$last_transaction_amount": stars_amount,
                "$last_transaction_date": str(message.date),
            },
        )

        # –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        mp.track(admin_id, "payment_successful", {"stars_amount": stars_amount})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        referrer_id = await get_referrer(admin_id)
        if referrer_id:
            commission = int(stars_amount * REFERRAL_COMMISSION / 100)
            # Update referrer's profile
            referrer_balance = await get_admin_credits(referrer_id)
            mp.people_set(
                referrer_id,
                {
                    "credits": referrer_balance,
                    "$last_commission_amount": commission,
                    "$last_commission_date": str(message.date),
                },
            )

            mp.track(
                referrer_id,
                "referral_commission",
                {
                    "referral_id": admin_id,
                    "payment_amount": stars_amount,
                    "commission_amount": commission,
                    "commission_percentage": REFERRAL_COMMISSION,
                },
            )

        await bot.send_message(
            admin_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á–µ–ª–æ–≤–µ–∫! –Ø –Ω–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ {stars_amount} –∑–≤–µ–∑–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª "
            f"–∑–∞—â–∏—Ç—É –≤ —Ç–≤–æ–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–µ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —É—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π! üí™",
        )

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
        mp.track(
            admin_id,
            "error_payment",
            {
                "error_type": type(e).__name__,
                "error_message": str(e),
                "stars_amount": stars_amount,
                "payment_info": str(message.successful_payment),
            },
        )
        logger.error(f"Error processing payment: {e}", exc_info=True)
        raise
