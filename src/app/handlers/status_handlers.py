from aiogram import types

from ..common.bot import bot
from ..common.mp import mp
from ..common.yandex_logging import get_yandex_logger, log_function_call
from ..database import get_admin, get_group, update_group_admins
from .dp import dp

logger = get_yandex_logger(__name__)


@dp.my_chat_member()
@log_function_call(logger)
async def handle_bot_status_update(event: types.ChatMemberUpdated) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç/—É–¥–∞–ª—è—é—Ç –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –º–µ–Ω—è—é—Ç –µ–≥–æ –ø—Ä–∞–≤–∞
    """
    try:
        if event.chat.type not in ["group", "supergroup"]:
            await _handle_wrong_chat_type(event)
            return

        new_status = event.new_chat_member.status
        chat_id = event.chat.id

        mp.track(
            event.from_user.id,
            "bot_status_changed",
            {
                "chat_id": chat_id,
                "new_status": new_status,
                "old_status": event.old_chat_member.status,
                "chat_type": event.chat.type,
                "chat_title": event.chat.title,
            },
        )

        if new_status in ["administrator", "member", "restricted"]:
            logger.info(f"Bot added to group {chat_id} with status {new_status}")

            admins = await bot.get_chat_administrators(chat_id)
            admin_ids = [admin.user.id for admin in admins if not admin.user.is_bot]
            await update_group_admins(chat_id, admin_ids)

            has_admin_rights = (
                new_status == "administrator"
                and event.new_chat_member.can_delete_messages
                and event.new_chat_member.can_restrict_members
            )

            mp.track(
                chat_id,
                "bot_added_to_group",
                {
                    "status": new_status,
                    "admin_count": len(admin_ids),
                    "chat_title": event.chat.title,
                    "added_by": event.from_user.id,
                    "has_admin_rights": has_admin_rights,
                },
            )

            if not has_admin_rights:
                await _notify_admins_about_rights(
                    chat_id, event.chat.title, event.chat.username, admin_ids
                )

            await _send_promo_message(
                chat_id,
                event.chat.title,
                event.chat.username,
                admin_ids,
                event.from_user.id,
            )

        elif new_status in ["left", "kicked"]:
            logger.info(f"Bot removed from group {chat_id}")

            mp.track(
                chat_id,
                "bot_removed_from_group",
                {
                    "status": new_status,
                    "removed_by": event.from_user.id,
                    "chat_title": event.chat.title,
                },
            )

            group = await get_group(chat_id)
            if group and group.admin_ids:
                await _notify_admins_about_removal(
                    chat_id, event.chat.title, event.chat.username, group.admin_ids
                )

    except Exception as e:
        mp.track(
            event.chat.id,
            "error_bot_status_update",
            {
                "error_type": type(e).__name__,
                "error_message": str(e),
                "new_status": event.new_chat_member.status,
            },
        )
        logger.error(f"Error handling bot status update: {e}", exc_info=True)


async def _handle_wrong_chat_type(event: types.ChatMemberUpdated) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞"""
    mp.track(
        event.from_user.id,
        "bot_status_wrong_chat_type",
        {
            "chat_type": event.chat.type,
            "new_status": event.new_chat_member.status,
        },
    )

    if event.new_chat_member.status == "member":
        try:
            await bot.send_message(
                event.from_user.id,
                "ü§ñ –í–Ω–∏–º–∞–Ω–∏–µ! –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
                "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.",
                parse_mode="markdown",
            )
        except Exception as e:
            logger.warning(f"Failed to send notification about chat type: {e}")


async def _notify_admins_about_rights(
    chat_id: int, chat_title: str, username: str | None, admin_ids: list[int]
) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç—É"""
    for admin_id in admin_ids:
        try:
            await bot.send_message(
                admin_id,
                "ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –∂–∏–∑–Ω–∏!\n\n"
                f"–Ø –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É *{chat_title}*"
                f"{f' (@{username})' if username else ''}, "
                "–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è, –∏ —è —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–π —â–∏—Ç "
                "–≤–æ–∫—Ä—É–≥ —Ç–≤–æ–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞! üõ°",
                parse_mode="markdown",
            )
        except Exception as e:
            mp.track(
                admin_id,
                "error_admin_notification",
                {
                    "chat_id": chat_id,
                    "error_type": type(e).__name__,
                    "error_message": str(e),
                },
            )
            logger.warning(f"Failed to notify admin {admin_id}: {e}")


async def _send_promo_message(
    chat_id: int,
    chat_title: str,
    username: str | None,
    admin_ids: list[int],
    added_by_id: int,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É"""
    try:
        min_credits_admin_id = added_by_id
        min_credits = float("inf")

        for admin_id in admin_ids:
            admin_data = await get_admin(admin_id)
            if admin_data and admin_data.credits < min_credits:
                min_credits = admin_data.credits
                min_credits_admin_id = admin_id

        admin = await get_admin(min_credits_admin_id)
        if admin:
            bot_info = await bot.get_me()
            ref_link = f"https://t.me/{bot_info.username}?start={min_credits_admin_id}"

            await bot.send_message(
                chat_id,
                "üõ°Ô∏è *–ù–µ–π—Ä–æ–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
                f"–ì—Ä—É–ø–ø–∞ *{chat_title}*"
                f"{f' (@{username})' if username else ''} "
                "—Ç–µ–ø–µ—Ä—å –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–ø–∞–º–∞\n"
                "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫–ª–∞–º—ã –∏ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ –£–º–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
                f"üöÄ [–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–æ–≥–æ –∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã]({ref_link})",
                parse_mode="markdown",
                disable_web_page_preview=True,
            )
    except Exception as e:
        logger.warning(f"Failed to send promo message: {e}")


async def _notify_admins_about_removal(
    chat_id: int, chat_title: str, username: str | None, admin_ids: list[int]
) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    for admin_id in admin_ids:
        try:
            await bot.send_message(
                admin_id,
                "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n\n"
                f"–ú–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ *{chat_title}*"
                f"{f' (@{username})' if username else ''} "
                "–±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n"
                "–ó–∞—â–∏—Ç–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–∞—Ä—É—à–µ–Ω. –ö–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑–∑–∞—â–∏—Ç–Ω—ã–º!\n\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –≤–µ—Ä–Ω–∏ –º–µ–Ω—è –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "
                "–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è.",
                parse_mode="markdown",
            )
        except Exception as e:
            mp.track(
                admin_id,
                "error_removal_notification",
                {
                    "chat_id": chat_id,
                    "error_type": type(e).__name__,
                    "error_message": str(e),
                },
            )
            logger.warning(f"Failed to notify admin {admin_id}: {e}")
