"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö Telegram.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –û–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å–ø–∞–º–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ø–∞–º–µ—Ä–æ–≤
"""

import logging
from typing import Optional

from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from ..common.bot import bot
from ..common.mp import mp
from ..common.notifications import notify_admins_with_fallback_and_cleanup
from ..common.tracking import track_group_event, track_spam_detection
from ..database import get_admin, get_group, remove_admin
from ..database.group_operations import (
    cleanup_inaccessible_group,
    get_pool,
    remove_member_from_group,
)

logger = logging.getLogger(__name__)


async def handle_spam(message: types.Message) -> str:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        if not message.from_user:
            logger.warning("Message without user info, skipping spam handling")
            return "spam_no_user_info"

        # –¢—Ä–µ–∫–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–ø–∞–º–∞
        await track_spam_detection(message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–æ–≤
        all_admins_delete = await check_admin_delete_preferences(message.chat.id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...
        notification_sent = await notify_admins(message, all_admins_delete)

        if all_admins_delete:
            await handle_spam_message_deletion(message)
            await ban_user_for_spam(message.chat.id, message.from_user.id)
            return "spam_auto_deleted"

        return (
            "spam_admins_notified" if notification_sent else "spam_notification_failed"
        )

    except Exception as e:
        logger.error(f"Error handling spam: {e}", exc_info=True)
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞
        mp.track(
            message.chat.id,
            "error_spam_handling",
            {
                "message_id": message.message_id,
                "error_type": type(e).__name__,
                "error_message": str(e),
            },
        )
        raise


async def check_admin_delete_preferences(chat_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    Args:
        chat_id: ID —á–∞—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –∞–¥–º–∏–Ω—ã –≤–∫–ª—é—á–∏–ª–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ, False –∏–Ω–∞—á–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    group = await get_group(chat_id)
    if not group:
        logger.error(f"Group not found for chat {chat_id}")
        return False

    for admin_id in group.admin_ids:
        admin_user = await get_admin(admin_id)
        if not admin_user or not admin_user.delete_spam:
            return False
    return True


def create_admin_notification_keyboard(
    message: types.Message, all_admins_delete: bool
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message: –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        all_admins_delete: –§–ª–∞–≥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    if not message.from_user:
        return InlineKeyboardMarkup(inline_keyboard=[[]])

    if not all_admins_delete:
        row = [
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_spam_message:{message.from_user.id}:{message.chat.id}:{message.message_id}",
            ),
            InlineKeyboardButton(
                text="‚úÖ –ù–µ —Å–ø–∞–º",
                callback_data=f"mark_as_not_spam:{message.from_user.id}:{message.chat.id}",
            ),
        ]
    else:
        row = [
            InlineKeyboardButton(
                text="‚úÖ –≠—Ç–æ –Ω–µ —Å–ø–∞–º",
                callback_data=f"mark_as_not_spam:{message.from_user.id}:{message.chat.id}",
            ),
        ]
    return InlineKeyboardMarkup(inline_keyboard=[row])


def format_admin_notification_message(
    message: types.Message, all_admins_delete: bool
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message: –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        all_admins_delete: –§–ª–∞–≥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    if not message.from_user:
        return "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"

    content_text = message.text or message.caption or "[MEDIA_MESSAGE]"
    chat_username_str = f" (@{message.chat.username})" if message.chat.username else ""
    user_username_str = (
        f" (@{message.from_user.username})" if message.from_user.username else ""
    )

    admin_msg = (
        "‚ö†Ô∏è <b>–í–¢–û–†–ñ–ï–ù–ò–ï!</b>\n\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {message.chat.title}{chat_username_str}\n\n"
        f"<b>–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:</b> {message.from_user.full_name}{user_username_str}\n\n"
        f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã:</b>\n<pre>{content_text}</pre>\n\n"
    )

    if all_admins_delete:
        admin_msg += (
            "<b>–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>"
        )
    else:
        link = f"https://t.me/{message.chat.username}/{message.message_id}"
        admin_msg += f'<a href="{link}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>'

    admin_msg += (
        "\n\n"
        '<a href="https://t.me/ai_antispam/7">'
        "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞</a>"
    )

    return admin_msg


async def notify_admins(message: types.Message, all_admins_delete: bool) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–∏.

    Args:
        message: –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        all_admins_delete: –§–ª–∞–≥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞

    Returns:
        bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not message.from_user:
        return False

    group = await get_group(message.chat.id)
    if not group:
        logger.error(f"Group not found for chat {message.chat.id}")
        return False

    admin_ids = group.admin_ids
    private_message = format_admin_notification_message(message, all_admins_delete)
    result = await notify_admins_with_fallback_and_cleanup(
        bot,
        admin_ids,
        message.chat.id,
        private_message,
        group_message_template="{mention}, —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥—Ä—É–ø–ø–µ!",
        cleanup_if_group_fails=True,
    )
    return bool(result["notified_private"]) or bool(result["group_notified"])


async def handle_spam_message_deletion(message: types.Message) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    if not message.from_user:
        return

    try:
        await bot.delete_message(message.chat.id, message.message_id)
        logger.info(
            f"Deleted spam message {message.message_id} in chat {message.chat.id}"
        )

        await track_group_event(
            message.chat.id,
            "spam_message_deleted",
            {
                "message_id": message.message_id,
                "user_id": message.from_user.id,
                "auto_delete": True,
            },
        )
    except TelegramBadRequest as e:
        logger.warning(
            f"Could not delete spam message {message.message_id} in chat {message.chat.id}: {e}",
            exc_info=True,
        )
        await track_group_event(
            message.chat.id,
            "spam_message_delete_failed",
            {
                "message_id": message.message_id,
                "user_id": message.from_user.id,
                "error_message": str(e),
            },
        )


async def ban_user_for_spam(chat_id: int, user_id: int) -> None:
    """
    –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ –∏ —É–¥–∞–ª—è–µ—Ç –∏–∑ approved_members.
    Args:
        chat_id: ID —á–∞—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        await bot.ban_chat_member(chat_id, user_id)
        logger.info(f"Banned user {user_id} in chat {chat_id} for spam")
    except Exception as e:
        logger.warning(
            f"Failed to ban user {user_id} in chat {chat_id}: {e}", exc_info=True
        )
    try:
        await remove_member_from_group(user_id, chat_id)
    except Exception as e:
        logger.warning(
            f"Failed to remove user {user_id} from approved_members: {e}", exc_info=True
        )
