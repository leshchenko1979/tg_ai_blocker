from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from ..common.bot import bot
from ..common.database import (
    APPROVE_PRICE,
    DELETE_PRICE,
    add_member,
    deduct_credits_from_admins,
    get_user,
    is_member_in_group,
    is_moderation_enabled,
    set_group_moderation,
    update_group_admins,
)
from ..common.dp import dp
from ..common.mp import mp
from ..common.yandex_logging import get_yandex_logger, log_function_call
from ..spam_classifier import is_spam
from ..stats import update_stats
from .updates_filter import filter_handle_message

logger = get_yandex_logger(__name__)


@log_function_call(logger)
async def try_deduct_credits(chat_id: int, amount: int, reason: str) -> bool:
    """
    –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã —É –∞–¥–º–∏–Ω–æ–≤. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    """
    if amount == 0:
        return True

    success = await deduct_credits_from_admins(chat_id, amount)

    # –¢—Ä–µ–∫–∏–Ω–≥ —Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–µ–∑–¥
    mp.track(
        chat_id,
        "credits_deduction_attempt",
        {"chat_id": chat_id, "amount": amount, "reason": reason, "success": success},
    )

    if not success:
        logger.warning(f"No paying admins in chat {chat_id} for {reason}")
        await set_group_moderation(chat_id, False)

        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mp.track(
            chat_id,
            "moderation_disabled_no_credits",
            {"chat_id": chat_id, "reason": reason, "required_amount": amount},
        )

        chat = await bot.get_chat(chat_id)
        admins = await bot.get_chat_administrators(chat_id)
        for admin in admins:
            if not admin.user.is_bot:
                await bot.send_message(
                    admin.user.id,
                    "–í–Ω–∏–º–∞–Ω–∏–µ, –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –∂–∏–∑–Ω–∏!\n\n"
                    f'–ú–æ—è –∑–∞—â–∏—Ç–∞ –≥—Ä—É–ø–ø—ã "{chat.title}" –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ '
                    "–∏–∑-–∑–∞ –∏—Å—Ç–æ—â–µ–Ω–∏—è –∑–≤–µ–∑–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏.\n\n"
                    "–ü–æ–ø–æ–ª–Ω–∏ –∑–∞–ø–∞—Å –∑–≤–µ–∑–¥ –∫–æ–º–∞–Ω–¥–æ–π /buy, —á—Ç–æ–±—ã —è –ø—Ä–æ–¥–æ–ª–∂–∏–ª –æ—Ö—Ä–∞–Ω—è—Ç—å "
                    "—Ç–≤–æ—ë –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ—Ç —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–∞—Ä–∞–∑–∏—Ç–æ–≤!",
                )
        return False
    return True


@log_function_call(logger)
async def handle_spam(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–ø–∞–º–∞
        mp.track(
            message.chat.id,
            "spam_detected",
            {
                "message_id": message.message_id,
                "author_id": message.from_user.id,
                "spammer_username": message.from_user.username,
                "message_text": message.text,
                "group_name": message.chat.title,
            },
        )

        update_stats(message.chat.id, "processed")

        admins = await bot.get_chat_administrators(message.chat.id)
        all_admins_delete = True

        for admin in admins:
            if admin.user.is_bot:
                continue
            admin_user = await get_user(admin.user.id)
            if not admin_user or not admin_user.delete_spam:
                all_admins_delete = False
                break

        if all_admins_delete:
            await bot.delete_message(message.chat.id, message.message_id)
            logger.info(
                f"Deleted spam message {message.message_id} in chat {message.chat.id}"
            )
            update_stats(message.chat.id, "deleted")

            # –¢—Ä–µ–∫–∏–Ω–≥ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞
            mp.track(
                message.chat.id,
                "spam_message_deleted",
                {
                    "message_id": message.message_id,
                    "user_id": message.from_user.id,
                    "auto_delete": True,
                },
            )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...
        for admin in admins:
            if admin.user.is_bot:
                continue

            try:
                keyboard = None
                if not all_admins_delete:
                    row = [
                        InlineKeyboardButton(
                            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                            callback_data=f"spam_confirm:{message.from_user.id}:{message.chat.id}:{message.message_id}",
                        ),
                        InlineKeyboardButton(
                            text="‚úÖ –ù–µ —Å–ø–∞–º",
                            callback_data=f"spam_ignore:{message.from_user.id}",
                        ),
                    ]
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])

                admin_msg = (
                    f"‚ö†Ô∏è –¢–†–ï–í–û–ì–ê!\n\n"
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ {message.chat.title} (@{message.chat.username})!\n\n"
                    f"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å: {message.from_user.id} (@{message.from_user.username})\n\n"
                    f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã:\n\n{message.text}\n\n"
                )

                if all_admins_delete:
                    admin_msg += "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ"
                else:
                    link = f"https://t.me/{message.chat.username}/{message.message_id}"
                    admin_msg += f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}"

                await bot.send_message(admin.user.id, admin_msg, reply_markup=keyboard)

                # –¢—Ä–µ–∫–∏–Ω–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
                mp.track(
                    admin.user.id,
                    "admin_spam_notification",
                    {
                        "chat_id": message.chat.id,
                        "message_id": message.message_id,
                        "auto_delete": all_admins_delete,
                    },
                )

            except Exception as e:
                logger.warning(f"Failed to notify admin {admin.user.id}: {e}")
                # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                mp.track(
                    admin.user.id,
                    "error_admin_notification",
                    {
                        "error_type": type(e).__name__,
                        "error_message": str(e),
                    },
                )

    except Exception as e:
        logger.error(f"Error handling spam: {e}", exc_info=True)
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞
        mp.track(
            message.chat.id,
            "error_spam_handling",
            {
                "message_id": message.message_id,
                "error_type": type(e).__name__,
                "error_message": str(e),
            },
        )
        raise


@dp.message(filter_handle_message)
@log_function_call(logger)
async def handle_moderated_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
    try:
        if not message.text:
            return

        chat_id = message.chat.id
        user_id = message.from_user.id

        # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æÔøΩÔøΩ—â–µ–Ω–∏—è
        mp.track(
            chat_id,
            "message_processing_started",
            {"user_id": user_id, "message_text": message.text},
        )

        admins = await bot.get_chat_administrators(chat_id)
        admin_ids = [admin.user.id for admin in admins if not admin.user.is_bot]
        await update_group_admins(chat_id, admin_ids)

        if not await is_moderation_enabled(chat_id):
            # –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            mp.track(
                chat_id,
                "message_skipped_moderation_disabled",
            )
            return

        is_known_member = await is_member_in_group(chat_id, user_id)

        if is_known_member:
            # –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mp.track(
                chat_id,
                "message_skipped_known_member",
                {"user_id": user_id},
            )
            return

        user = message.from_user
        user_with_bio = await bot.get_chat(user.id)
        bio = user_with_bio.bio if user_with_bio else None

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –Ω–µ-–±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_id = next(
            (admin.user.id for admin in admins if not admin.user.is_bot), None
        )

        spam_score = await is_spam(
            comment=message.text, name=user.full_name, bio=bio, admin_id=admin_id
        )

        # –¢—Ä–µ–∫–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º
        mp.track(
            chat_id,
            "spam_check_result",
            {
                "chat_id": chat_id,
                "user_id": user_id,
                "spam_score": spam_score,
                "is_spam": spam_score > 50,
                "message_text": message.text,
                "user_bio": bio,
            },
        )

        if spam_score > 50:
            if await try_deduct_credits(chat_id, DELETE_PRICE, "delete spam"):
                await handle_spam(message)
            return

        if await try_deduct_credits(chat_id, APPROVE_PRICE, "approve user"):
            await add_member(chat_id, user_id)
            update_stats(chat_id, "processed")
            # –¢—Ä–µ–∫–∏–Ω–≥ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mp.track(
                chat_id,
                "user_approved",
                {"chat_id": chat_id, "user_id": user_id, "spam_score": spam_score},
            )

    except Exception as e:
        logger.error(f"Error processing message: {e}", exc_info=True)
        # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
        mp.track(
            chat_id,
            "error_message_processing",
            {
                "error_type": type(e).__name__,
                "error_message": str(e),
            },
        )
        raise
