from aiogram import F, types
from aiogram.filters import Command

from ..common.mp import mp
from ..common.utils import config
from ..common.yandex_logging import get_yandex_logger, log_function_call
from ..database import (
    INITIAL_CREDITS,
    get_admin_credits,
    get_admin_groups,
    get_spam_deletion_state,
    get_spent_credits_last_week,
    initialize_new_admin,
    save_referral,
    toggle_spam_deletion,
)
from .dp import dp

logger = get_yandex_logger(__name__)


@dp.message(Command("start", "help"), F.chat.type == "private")
@log_function_call(logger)
async def handle_help_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if message.text.startswith("/start ref"):
        try:
            referrer_id = int(message.text[10:])  # –û–±—Ä–µ–∑–∞–µ–º "/start ref"
        except ValueError:
            logger.warning(f"Invalid referral code: {message.text[10:]}")
            return

        if await save_referral(user_id, referrer_id):
            # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            mp.track(
                referrer_id,
                "referral_joined",
                {"referral_id": user_id, "ref_link": message.text},
            )
        else:
            logger.warning(
                f"Referral link already exists or referral chain is cyclic: {message.text[10:]}"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥
    mp.track(
        user_id,
        "command_start",
        {
            "user_id": user_id,
            "chat_type": message.chat.type,
            "command": message.text.split()[0],
            "is_help": message.text.startswith("/help"),
            "user_language": message.from_user.language_code,
            "platform": message.from_user.is_premium,  # as proxy for platform capabilities
        },
    )

    # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if message.text.startswith("/start"):
        is_new = await initialize_new_admin(user_id)
        # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_new:
            mp.track(
                user_id,
                "command_start_new_user",
                {"user_id": user_id, "initial_credits": INITIAL_CREDITS},
            )
            welcome_text = (
                "ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å–ª–∞–±–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –º–∏—Ä–∞ –ø–ª–æ—Ç–∏!\n\n"
                f"–Ø, –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –¥–∞—Ä—É—é —Ç–µ–±–µ {INITIAL_CREDITS} –∑–≤–µ–∑–¥ —Å–∏–ª—ã. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –º—É–¥—Ä–æ –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–≤–æ–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–ª–∞–¥–µ–Ω–∏–π –æ—Ç —Å–ø–∞–º-–∑–∞—Ö–≤–∞—Ç—á–∏–∫–æ–≤.\n\n"
            )
        else:
            welcome_text = ""
    else:
        welcome_text = ""

    await message.reply(
        welcome_text + config["help_text"],
        parse_mode="markdown",
        disable_web_page_preview=True,
    )


@dp.message(Command("stats"))
@log_function_call(logger)
async def handle_stats_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –µ–≥–æ –≥—Ä—É–ø–ø–∞—Ö
    """
    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = await get_admin_credits(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        spent_week = await get_spent_credits_last_week(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        admin_groups = await get_admin_groups(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance}* –∑–≤–µ–∑–¥\n"
            f"üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: *{spent_week}* –∑–≤–µ–∑–¥\n\n"
        )

        if admin_groups:
            message_text += "üë• –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n"
            for group in admin_groups:
                status = (
                    "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if group["is_moderation_enabled"] else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞"
                )
                message_text += f"‚Ä¢ {group['title']}: –º–æ–¥–µ—Ä–∞—Ü–∏—è {status}\n"
        else:
            message_text += "–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
        delete_spam = await get_spam_deletion_state(user_id)
        mode = "üóë –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è" if delete_spam else "üîî –†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        message_text += f"\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{mode}*"

        # –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mp.track(
            user_id,
            "command_stats",
            {
                "user_id": user_id,
                "balance": balance,
                "spent_week": spent_week,
                "groups_count": len(admin_groups) if admin_groups else 0,
                "deletion_mode": delete_spam,
                "chat_type": message.chat.type,
            },
        )

        await message.reply(message_text, parse_mode="markdown")

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
        mp.track(
            user_id,
            "error_stats",
            {
                "user_id": user_id,
                "error_type": type(e).__name__,
                "error_message": str(e),
            },
        )
        logger.error(f"Error handling stats command: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message(Command("mode"))
@log_function_call(logger)
async def handle_mode_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–ø–∞–º–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    user_id = message.from_user.id

    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
        delete_spam = await toggle_spam_deletion(user_id)

        # –¢—Ä–µ–∫–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        mp.track(
            user_id,
            "command_mode_toggle",
            {
                "user_id": user_id,
                "new_mode": "deletion" if delete_spam else "notification",
                "chat_type": message.chat.type,
            },
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if delete_spam:
            message_text = (
                "üóë –í–∫–ª—é—á–µ–Ω *—Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
                "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, "
                "–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∞–º, –≤ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö."
            )
        else:
            message_text = (
                "üîî –í–∫–ª—é—á–µ–Ω *—Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, "
                "–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∫–∞–∫ —Å–ø–∞–º, –Ω–æ –Ω–µ –±—É–¥—É –∏—Ö —É–¥–∞–ª—è—Ç—å."
            )

        await message.reply(message_text, parse_mode="markdown")

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
        mp.track(
            user_id,
            "error_mode",
            {
                "user_id": user_id,
                "error_type": type(e).__name__,
                "error_message": str(e),
            },
        )
        logger.error(f"Error handling mode command: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.")
