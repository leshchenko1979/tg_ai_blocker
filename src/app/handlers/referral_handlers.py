import urllib.parse

from aiogram import F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..common.mp import mp
from ..common.utils import config
from ..common.yandex_logging import get_yandex_logger, log_function_call
from ..database.referral_operations import get_referrals, get_total_earnings
from .dp import dp

logger = get_yandex_logger(__name__)

SHARE_MESSAGE = """
ü§ñ –ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –º–æ–∏–º —Ü–∏—Ñ—Ä–æ–≤—ã–º –∑–∞—â–∏—Ç–Ω–∏–∫–æ–º!

–≠—Ç–æ –±–æ—Ç —Å –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –æ—Ö—Ä–∞–Ω—è–µ—Ç Telegram-–≥—Ä—É–ø–ø—ã –æ—Ç —Å–ø–∞–º–∞. –û–Ω:

‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–∞–º–µ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –í–µ–¥–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£—á–∏—Ç—Å—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ

–Ø —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é –µ–≥–æ –∏ –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã üëá
"""


@dp.message(Command("ref"), F.chat.type == "private")
@log_function_call(logger)
async def cmd_ref(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞"""
    user_id = message.from_user.id

    try:
        bot = await message.bot.get_me()
        ref_link = f"https://t.me/{bot.username}?start=ref{user_id}"

        # Encode the message for the share URL
        encoded_message = urllib.parse.quote(SHARE_MESSAGE)
        encoded_link = urllib.parse.quote(ref_link)

        # Create keyboard with properly encoded URLs
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º",
            url=f"https://t.me/share/url?url={encoded_link}&text={encoded_message}",
        )

        commission = config["referral_program"]["rewards"]["commission"]

        # –¢—Ä–µ–∫–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        mp.track(user_id, "referral_link_generated")

        await message.answer(
            "üîó –í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
            f"`{ref_link}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {commission}% –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –≤–∏–¥–µ –∑–≤—ë–∑–¥!\n\n"
            "üí° –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∞:\n\n"
            f"{SHARE_MESSAGE}",
            parse_mode="Markdown",
            reply_markup=builder.as_markup(),
        )
    except Exception as e:
        logger.error(f"Error generating referral link: {e}", exc_info=True)
        mp.track(user_id, "error_ref_command", {"error": str(e)})
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")


@dp.message(Command("refs"), F.chat.type == "private")
@log_function_call(logger)
async def cmd_refs(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"""
    user_id = message.from_user.id

    try:
        referrals = await get_referrals(user_id)
        total_earned = await get_total_earnings(user_id)

        # –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mp.track(
            user_id,
            "referral_stats_viewed",
            {"referrals_count": len(referrals), "total_earned": total_earned},
        )

        if not referrals:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é "
                "—Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /ref"
            )
            return

        text = [
            f"üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {len(referrals)} —á–µ–ª.",
            f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–µ–∑–¥: {total_earned}",
            "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:",
        ]

        for ref in referrals[:5]:
            joined = ref["joined_at"].strftime("%d.%m.%Y")
            text.append(f"‚Ä¢ {joined}: –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ {ref['earned_stars']} –∑–≤–µ–∑–¥")

        text.append("\n–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /ref")

        await message.answer("\n".join(text))

    except Exception as e:
        logger.error(f"Error showing referral stats: {e}", exc_info=True)
        mp.track(user_id, "error_refs_command", {"error": str(e)})
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
