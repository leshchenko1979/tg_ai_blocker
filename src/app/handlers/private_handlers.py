import asyncio
import pathlib
from typing import Any, Dict

from aiogram import F, types

from ..common.bot import bot
from ..common.database import (
    add_spam_example,
    get_message_history,
    get_spam_examples,
    remove_member_from_group,
    save_message,
)
from ..common.dp import dp
from ..common.llms import get_openrouter_response
from ..common.mp import mp
from ..common.yandex_logging import get_yandex_logger, log_function_call
from ..utils import config

logger = get_yandex_logger(__name__)


class OriginalMessageExtractionError(Exception):
    """Raised when original message information cannot be extracted"""


@dp.message(F.chat.type == "private", ~F.text.startswith("/"), ~F.forward_from)
@log_function_call(logger)
async def handle_private_message(message: types.Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è LLM –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    admin_id = message.from_user.id
    admin_message = message.text

    # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    mp.track(admin_id, "private_message_received", {"message_text": admin_message})

    # Save user message to history
    await save_message(admin_id, "user", admin_message)

    try:
        # Get conversation history
        message_history = await get_message_history(admin_id)

        # –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
        mp.track(
            admin_id,
            "llm_request_started",
            {
                "history_length": len(message_history),
                "message_text": admin_message,
            },
        )

        # Read PRD for system context
        prd_text = pathlib.Path("PRD.md").read_text()
        # Get spam examples from Redis
        spam_examples = await get_spam_examples()

        # Format spam examples for prompt
        formatted_examples = []
        for example in spam_examples:
            example_str = (
                f"<–∑–∞–ø—Ä–æ—Å>\n<—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n{example['text']}\n</—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>"
            )
            if "name" in example:
                example_str += f"\n<–∏–º—è>{example['name']}</–∏–º—è>"
            if "bio" in example:
                example_str += f"\n<–±–∏–æ–≥—Ä–∞—Ñ–∏—è>{example['bio']}</–±–∏–æ–≥—Ä–∞—Ñ–∏—è>"
            example_str += "\n</–∑–∞–ø—Ä–æ—Å>\n<–æ—Ç–≤–µ—Ç>\n"
            example_str += f"{'–¥–∞' if example['score'] > 0 else '–Ω–µ—Ç'} {abs(example['score'])}%\n</–æ—Ç–≤–µÔøΩÔøΩ>"
            formatted_examples.append(example_str)

        system_prompt = f"""
        –¢—ã - –Ω–µ–π—Ä–æ–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∫–∏–±–µ—Ä—Å—É—â–Ω–æ—Å—Ç—å, –∑–∞—â–∏—â–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–ø–∞–º–∞.
        –¢–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–∏—Å–∞–Ω –Ω–∏–∂–µ.

        <—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞>
        {prd_text}
        </—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞>

        –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /start:

        <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
        {config['help_text']}
        </—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>

        –ê –≤–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–ø–∞–º–æ–º, –∞ —á—Ç–æ –Ω–µ—Ç
        (–µ—Å–ª–∏ spam_score > 50, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º):
        <–ø—Ä–∏–º–µ—Ä—ã>
        {'\n'.join(formatted_examples)}
        </–ø—Ä–∏–º–µ—Ä—ã>

        –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞.

        –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

        –†–∞–∑–±–∏–≤–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã. –£–º–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
        –ò—Å–ø–æ–ª—å–∑—É–π **–≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º**.
        """

        # Combine system prompt with message history
        messages = [{"role": "system", "content": system_prompt}]
        messages.extend(message_history)

        # Get response from LLM
        response = await get_openrouter_response(messages)

        # –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ LLM
        mp.track(
            admin_id,
            "llm_response_received",
            {"response_text": response},
        )

        # Save bot's response to history
        await save_message(admin_id, "assistant", response)

        await message.reply(response, parse_mode="markdown")

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
        mp.track(
            admin_id,
            "error_private_message",
            {
                "error_type": type(e).__name__,
                "error_message": str(e),
                "message_text": admin_message,
            },
        )
        logger.error(f"Error in private message handler: {e}", exc_info=True)
        raise


@dp.message(F.chat.type == "private", F.forward_from)
@log_function_call(logger)
async def handle_forwarded_message(message: types.Message):
    """
    Handle forwarded messages in private chats.
    """
    admin_id = message.from_user.id

    # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    mp.track(
        admin_id,
        "forwarded_message_received",
        {
            "forward_from_id": message.forward_from.id,
            "forward_date": str(message.forward_date),
            "message_text": message.text or message.caption,
        },
    )

    # Ask the user if they want to add this as a spam example
    row = [
        types.InlineKeyboardButton(text="‚ö†Ô∏è –°–ø–∞–º", callback_data="spam_example:spam"),
        types.InlineKeyboardButton(
            text="üíö –ù–µ —Å–ø–∞–º", callback_data="spam_example:not_spam"
        ),
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[row])

    await message.reply(
        "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –ø—Ä–∏–º–µ—Ä–æ–≤?", reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("spam_example:"))
@log_function_call(logger)
async def process_spam_example_callback(callback: types.CallbackQuery):
    """
    Process the user's response to the spam example prompt.
    """
    admin_id = callback.from_user.id
    _, action = callback.data.split(":")

    try:
        info = await extract_original_message_info(callback.message)

        callback_answer_task = asyncio.create_task(
            bot(
                callback.answer(
                    (
                        "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö."
                        if action == "spam"
                        else "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Ü–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    ),
                )
            )
        )

        add_spam_example_task = asyncio.create_task(
            add_spam_example(
                info["text"],
                name=info["name"],
                bio=info["bio"],
                score=100 if action == "spam" else -100,
                admin_id=admin_id,
            )
        )

        remove_member_from_group_task = (
            asyncio.create_task(remove_member_from_group(member_id=info["user_id"]))
            if action == "spam"
            else None
        )

        edit_message_task = asyncio.create_task(
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä {'—Å–ø–∞–º–∞' if action == 'spam' else '—Ü–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'}.",
            )
        )

        await asyncio.gather(
            callback_answer_task,
            add_spam_example_task,
            remove_member_from_group_task,
            edit_message_task,
        )

        # –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
        mp.track(
            admin_id,
            "spam_example_added",
            {
                "message_text": info["text"],
                "name": info["name"],
                "bio": info["bio"],
                "action": action,
            },
        )

    except OriginalMessageExtractionError:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        mp.track(admin_id, "error_message_extraction", {"action": action})
        logger.error("Failed to extract original message info", exc_info=True)

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        mp.track(
            admin_id,
            "error_spam_example_processing",
            {
                "error_type": type(e).__name__,
                "error_message": str(e),
                "action": action,
            },
        )
        logger.error(f"Error processing spam example: {e}", exc_info=True)


async def extract_original_message_info(
    callback_message: types.Message,
) -> Dict[str, Any]:
    """
    Extracts original message name, bio, chat_id from a callback message.

    Raises:
        OriginalMessageExtractionError: If original message information cannot be extracted
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç
    if not callback_message.reply_to_message:
        raise OriginalMessageExtractionError("No reply message found")

    original_message = callback_message.reply_to_message

    if original_message.forward_from_chat:
        raise OriginalMessageExtractionError(
            "Cannot extract meaningful message information from forwarded channel message"
        )

    if not original_message.forward_from:
        raise OriginalMessageExtractionError("Reply message is not a forwarded message")

    name = original_message.forward_from.full_name
    text = original_message.text or original_message.caption

    if name or text:
        # –ü–æ–ª—É—á–∞–µ–º bio —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API
        try:
            user_id = original_message.forward_from.id
            user = await bot.get_chat(user_id)
            bio = user.bio
        except Exception:
            bio = None

        return {
            "user_id": user_id,
            "name": name,
            "bio": bio,
            "text": text,
        }

    raise OriginalMessageExtractionError(
        "Cannot extract meaningful message information from forwarded message"
    )
