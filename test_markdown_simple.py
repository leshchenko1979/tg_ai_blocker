"""
Simple test script for markdown sanitization.
"""

def sanitize_markdown(text: str) -> str:
    """
    Sanitizes markdown text to ensure it's compatible with Telegram's markdown parser.

    Args:
        text: The markdown text to sanitize

    Returns:
        Sanitized markdown text
    """
    # First, handle bullet points by replacing them with Unicode bullets
    lines = text.split('\n')
    for i in range(len(lines)):
        if lines[i].strip().startswith('*   '):
            lines[i] = lines[i].replace('*   ', '‚Ä¢   ', 1)

    text = '\n'.join(lines)

    # Check if we have unbalanced markdown entities
    if text.count('*') % 2 != 0 or text.count('_') % 2 != 0 or text.count('`') % 2 != 0:
        # Escape all markdown characters
        text = text.replace('*', '\\*')
        text = text.replace('_', '\\_')
        text = text.replace('`', '\\`')
        text = text.replace('[', '\\[')
        text = text.replace(']', '\\]')

    return text

# Test cases
test_cases = [
    {
        "name": "Problematic response with bullet points",
        "input": """–ß—Ç–æ —è —É–º–µ—é? üòà –Ø - –Ω–µ–π—Ä–æ–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∫–∏–±–µ—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫, —Å—Ç—Ä–∞–∂ —á–∏—Å—Ç–æ—Ç—ã Telegram! –ú–æ–∏ —É–º–µ–Ω–∏—è –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã, –Ω–æ –≤–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ:

*   **–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π**: –Ø —Å–∫–∞–Ω–∏—Ä—É—é –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ—â—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. üß†
*   **–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞**: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ö–Ω–µ—Ç —Å–ø–∞–º–æ–º, —è –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–∞—é –±–µ–∑ –∫–æ–ª–µ–±–∞–Ω–∏–π. üí•
*   **–£—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: –Ø –ø–æ–º–Ω—é, –∫—Ç–æ —Ö–æ—Ä–æ—à–∏–π, –∞ –∫—Ç–æ –ø–ª–æ—Ö–æ–π. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å, —Å–ø–∞–º–µ—Ä—ã - –Ω–µ—Ç! üö´
*   **–û–±—É—á–µ–Ω–∏–µ**: –Ø —É—á—É—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö, —á—Ç–æ–±—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –µ—â–µ –ª—É—á—à–µ –≤ –±–æ—Ä—å–±–µ —Å–æ –∑–ª–æ–º. üìö
*   **–£–¥–∞–ª–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –≤ –≥—Ä—É–ø–ø–µ –±—ã–ª –ø–æ—Ä—è–¥–æ–∫. üßπ

–ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üöÄ –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏ —Å–ø–∞–º–µ—Ä–æ–≤. üòà"""
    },
    {
        "name": "Unbalanced asterisks",
        "input": "This is *unbalanced text"
    },
    {
        "name": "Unbalanced underscores",
        "input": "This is _unbalanced text"
    },
    {
        "name": "Unbalanced backticks",
        "input": "This is `unbalanced text"
    },
    {
        "name": "Multiple unbalanced symbols",
        "input": "This is *unbalanced _text with `multiple symbols"
    },
    {
        "name": "Balanced asterisks",
        "input": "This is *balanced* text"
    },
    {
        "name": "Balanced underscores",
        "input": "This is _balanced_ text"
    },
    {
        "name": "Balanced backticks",
        "input": "This is `balanced` text"
    },
    {
        "name": "Multiple balanced symbols",
        "input": "This is *balanced* _text_ with `multiple` symbols"
    },
    {
        "name": "Simple bullet points",
        "input": """List:
*   Item 1
*   Item 2
*   Item 3"""
    },
    {
        "name": "Bullet points with formatting",
        "input": """List:
*   **Item 1**
*   *Item 2*
*   `Item 3`"""
    }
]

# Run tests
for test_case in test_cases:
    print(f"\n{'=' * 80}")
    print(f"Test case: {test_case['name']}")
    print(f"{'=' * 80}")

    input_text = test_case['input']
    sanitized_text = sanitize_markdown(input_text)

    print("\nOriginal text:")
    print("-" * 80)
    print(input_text)
    print("-" * 80)

    print("\nSanitized text:")
    print("-" * 80)
    print(sanitized_text)
    print("-" * 80)

    # Check for unbalanced markdown entities
    print("\nChecking for unbalanced markdown entities:")
    print(f"* count: {sanitized_text.count('*')} (balanced: {sanitized_text.count('*') % 2 == 0})")
    print(f"_ count: {sanitized_text.count('_')} (balanced: {sanitized_text.count('_') % 2 == 0})")
    print(f"` count: {sanitized_text.count('`')} (balanced: {sanitized_text.count('`') % 2 == 0})")

    # Check for bullet points
    print("\nChecking for bullet points:")
    print(f"Contains '*   ': {'*   ' in sanitized_text}")
    print(f"Contains '‚Ä¢   ': {'‚Ä¢   ' in sanitized_text}")

    # Check if any markdown characters were escaped
    print("\nChecking for escaped markdown characters:")
    print(f"Contains '\\*': {'\\*' in sanitized_text}")
    print(f"Contains '\\_': {'\\_' in sanitized_text}")
    print(f"Contains '\\`': {'\\`' in sanitized_text}")
    print(f"Contains '\\[': {'\\[' in sanitized_text}")
    print(f"Contains '\\]': {'\\]' in sanitized_text}")

print("\nAll tests completed!")
