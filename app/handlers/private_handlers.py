import pathlib
from aiogram import F, types

from common.bot import bot
from common.database.message_operations import get_message_history, save_message
from common.database.spam_examples import add_spam_example, get_spam_examples
from common.dp import dp
from common.llms import get_openrouter_response
from common.yandex_logging import get_yandex_logger, log_function_call
from utils import config

logger = get_yandex_logger(__name__)


@dp.message(F.chat.type == "private", ~F.text.startswith("/"), ~F.forward)
@log_function_call(logger)
async def handle_private_message(message: types.Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è LLM –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    user_id = message.from_user.id
    user_message = message.text

    # Save user message to history
    await save_message(user_id, "user", user_message)

    # Get conversation history
    message_history = await get_message_history(user_id)

    # Read PRD for system context
    prd_text = pathlib.Path("PRD.md").read_text()
    # Get spam examples from Redis
    spam_examples = await get_spam_examples()

    # Format spam examples for prompt
    formatted_examples = []
    for example in spam_examples:
        example_str = (
            f"<–∑–∞–ø—Ä–æ—Å>\n<—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n{example['text']}\n</—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>"
        )
        if "name" in example:
            example_str += f"\n<–∏–º—è>{example['name']}</–∏–º—è>"
        if "bio" in example:
            example_str += f"\n<–±–∏–æ–≥—Ä–∞—Ñ–∏—è>{example['bio']}</–±–∏–æ–≥—Ä–∞—Ñ–∏—è>"
        example_str += "\n</–∑–∞–ø—Ä–æ—Å>\n<–æ—Ç–≤–µ—Ç>\n"
        example_str += f"{'–¥–∞' if example['score'] > 0 else '–Ω–µ—Ç'} {abs(example['score'])}%\n</–æ—Ç–≤–µ—Ç>"
        formatted_examples.append(example_str)

    system_prompt = f"""
    –¢—ã - –Ω–µ–π—Ä–æ–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∫–∏–±–µ—Ä—Å—É—â–Ω–æ—Å—Ç—å, –∑–∞—â–∏—â–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–ø–∞–º–∞.
    –¢–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–∏—Å–∞–Ω –Ω–∏–∂–µ.

    <—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –ø–µ—Ä—Å–æ–Ω–∞>
    {prd_text}
    </—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –ø–µ—Ä—Å–æ–Ω–∞>

    –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /start:

    <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    {config['help_text']}
    </—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>

    –ê –≤–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–ø–∞–º–æ–º, –∞ —á—Ç–æ –Ω–µ—Ç
    (–µ—Å–ª–∏ spam_score > 50, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º):
    <–ø—Ä–∏–º–µ—Ä—ã>
    {'\n'.join(formatted_examples)}
    </–ø—Ä–∏–º–µ—Ä—ã>

    –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∏ –ò–°–ü–û–õ–¨–ó–£–ô –ü–ï–†–°–û–ù–£ –ë–û–¢–ê.

    –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

    –†–∞–∑–±–∏–≤–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã. –£–º–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π **–≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º**.
    """

    # Combine system prompt with message history
    messages = [{"role": "system", "content": system_prompt}]
    messages.extend(message_history)

    # Get response from LLM
    response = await get_openrouter_response(messages)

    # Save bot's response to history
    await save_message(user_id, "assistant", response)

    # Send response to user
    await message.reply(response, parse_mode="markdown")


@dp.message(F.chat.type == "private", F.forward)
@log_function_call(logger)
async def handle_forwarded_message(message: types.Message):
    """
    Handle forwarded messages in private chats.
    """
    # Ask the user if they want to add this as a spam example
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚ö†Ô∏è –°–ø–∞–º",
                    callback_data="spam_example:spam",
                ),
                types.InlineKeyboardButton(
                    text="üíö –ù–µ —Å–ø–∞–º",
                    callback_data="spam_example:not_spam",
                ),
            ]
        ]
    )

    await message.reply("–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –ø—Ä–∏–º–µ—Ä–æ–≤?", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("spam_example:"))
@log_function_call(logger)
async def process_spam_example_callback(callback_query: types.CallbackQuery):
    """
    Process the user's response to the spam example prompt.
    """
    _, action = callback_query.data.split(":")

    info = extract_original_message_info(callback_query.message)

    await add_spam_example(
        info["text"],
        name=info["name"],
        bio=info["bio"],
        score=100 if action == "spam" else -100,
    )

    if action == "spam":
        # Attempt to delete the original message if available
        if info["chat_id"] and info["message_id"]:
            try:
                await bot.delete_message(info["chat_id"], info["message_id"])
                await callback_query.answer(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
                )
            except Exception as e:
                await callback_query.answer(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
    elif action == "not_spam":
        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Ü–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    # Update the original message text to reflect the user's choice
    await callback_query.message.edit_text(
        text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä {'—Å–ø–∞–º–∞' if action == 'spam' else '—Ü–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'}.",
    )


def extract_original_message_info(callback_message: types.Message):
    """
    Extracts original message name, bio, chat_id, and message_id from a callback message.
    """
    original_message = (
        callback_message.reply_to_message.forward
        if callback_message.reply_to_message
        and callback_message.reply_to_message.forward
        else None
    )
    name = (
        original_message.from_user.full_name
        if original_message and original_message.from_user
        else None
    )
    bio = (
        original_message.from_user.bio
        if original_message and original_message.from_user
        else None
    )
    chat_id = original_message.chat.id if original_message else None
    message_id = original_message.message_id if original_message else None
    text = (
        callback_message.reply_to_message.text
        if callback_message.reply_to_message
        else None
    )

    return {
        "name": name,
        "bio": bio,
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
    }
