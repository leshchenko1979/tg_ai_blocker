from aiogram import F, types
from aiogram.filters import Command

from common.bot import bot
from common.database import add_credits, get_user_groups, set_group_moderation
from common.dp import dp
from common.mp import mp
from common.yandex_logging import get_yandex_logger, log_function_call

logger = get_yandex_logger(__name__)

STARS_AMOUNT = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É


@dp.message(Command("buy"))
@log_function_call(logger)
async def handle_buy_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
    """
    user_id = message.from_user.id

    # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏
    mp.track(
        user_id,
        "payment_buy_initiated",
        {
            "user_id": user_id,
            "stars_amount": STARS_AMOUNT,
            "chat_type": message.chat.type,
        },
    )

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ó–≤–µ–∑–¥—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞",
        description=f"–ü–æ–∫—É–ø–∫–∞ {STARS_AMOUNT} –∑–≤–µ–∑–¥ –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –æ—Ç —Å–ø–∞–º–∞",
        payload="Stars purchase",
        provider_token="",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        currency="XTR",
        prices=[
            types.LabeledPrice(
                label=f"{STARS_AMOUNT} –∑–≤–µ–∑–¥",
                amount=STARS_AMOUNT,  # 1 –∑–≤–µ–∑–¥–∞ = 1 –µ–¥–∏–Ω–∏—Ü–∞
            )
        ],
    )


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = pre_checkout_query.from_user.id

    # –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    mp.track(
        user_id,
        "payment_pre_checkout",
        {
            "user_id": user_id,
            "total_amount": pre_checkout_query.total_amount,
            "currency": pre_checkout_query.currency,
            "invoice_payload": pre_checkout_query.invoice_payload,
        },
    )

    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = message.from_user.id
    stars_amount = message.successful_payment.total_amount

    try:
        # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã
        await add_credits(user_id, stars_amount)

        # –í–∫–ª—é—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_groups = await get_user_groups(user_id)
        enabled_groups = 0
        for group_id in user_groups:
            await set_group_moderation(group_id, True)
            enabled_groups += 1

        # –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        mp.track(
            user_id,
            "payment_successful",
            {
                "user_id": user_id,
                "stars_amount": stars_amount,
                "currency": message.successful_payment.currency,
                "total_amount": message.successful_payment.total_amount,
                "provider_payment_charge_id": message.successful_payment.provider_payment_charge_id,
                "telegram_payment_charge_id": message.successful_payment.telegram_payment_charge_id,
                "enabled_groups": enabled_groups,
                "total_groups": len(user_groups) if user_groups else 0,
            },
        )

        await bot.send_message(
            user_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á–µ–ª–æ–≤–µ–∫! –Ø –Ω–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ {stars_amount} –∑–≤–µ–∑–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª "
            f"–∑–∞—â–∏—Ç—É –≤ —Ç–≤–æ–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–µ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —É—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π! üí™",
        )

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
        mp.track(
            user_id,
            "error_payment",
            {
                "user_id": user_id,
                "error_type": type(e).__name__,
                "error_message": str(e),
                "stars_amount": stars_amount,
                "payment_info": str(message.successful_payment),
            },
        )
        logger.error(f"Error processing payment: {e}", exc_info=True)
        raise
