from aiogram import F, types
from aiogram.filters import Command
from common.bot import bot
from common.database import get_pool, get_referrer
from common.dp import dp
from common.mp import mp
from common.yandex_logging import get_yandex_logger, log_function_call
from utils import config

logger = get_yandex_logger(__name__)

STARS_AMOUNT = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É
REFERRAL_COMMISSION = (
    config["referral_program"]["rewards"]["commission"] / 100
)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª—é


@dp.message(Command("buy"))
@log_function_call(logger)
async def handle_buy_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
    """

    # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏
    mp.track(
        message.from_user.id, "payment_buy_initiated", {"stars_amount": STARS_AMOUNT}
    )

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ó–≤–µ–∑–¥—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞",
        description=f"–ü–æ–∫—É–ø–∫–∞ {STARS_AMOUNT} –∑–≤–µ–∑–¥ –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –æ—Ç —Å–ø–∞–º–∞",
        payload="Stars purchase",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label=f"{STARS_AMOUNT} –∑–≤–µ–∑–¥", amount=STARS_AMOUNT)],
    )


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    admin_id = message.from_user.id
    stars_amount = message.successful_payment.total_amount

    try:
        pool = await get_pool()
        async with pool.acquire() as conn:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –≤ –æ–¥–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
            await conn.execute(
                "CALL process_successful_payment($1, $2, $3)",
                admin_id,
                stars_amount,
                REFERRAL_COMMISSION,
            )

        # –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        mp.track(admin_id, "payment_successful", {"stars_amount": stars_amount})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        referrer_id = await get_referrer(admin_id)
        if referrer_id:
            commission = int(stars_amount * REFERRAL_COMMISSION)
            # –¢—Ä–µ–∫–∏–Ω–≥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
            mp.track(
                referrer_id,
                "referral_commission",
                {
                    "referral_id": admin_id,
                    "payment_amount": stars_amount,
                    "commission_amount": commission,
                    "commission_percentage": config["referral_program"]["rewards"][
                        "commission"
                    ],
                },
            )

        await bot.send_message(
            admin_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á–µ–ª–æ–≤–µ–∫! –Ø –Ω–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ {stars_amount} –∑–≤–µ–∑–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª "
            f"–∑–∞—â–∏—Ç—É –≤ —Ç–≤–æ–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–µ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —É—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π! üí™",
        )

    except Exception as e:
        # –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
        mp.track(
            admin_id,
            "error_payment",
            {
                "error_type": type(e).__name__,
                "error_message": str(e),
                "stars_amount": stars_amount,
                "payment_info": str(message.successful_payment),
            },
        )
        logger.error(f"Error processing payment: {e}", exc_info=True)
        raise
