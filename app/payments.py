import os
from datetime import datetime, timedelta
from typing import Optional

from aiogram.filters import Command
from aiogram import types

from yookassa import Configuration, Payment
from yookassa.domain.common.confirmation_type import ConfirmationType
from yookassa.domain.request.payment_request import PaymentRequest

from common.database_upstash import add_credits, get_user_groups, set_group_moderation
from common.yandex_logging import get_yandex_logger, log_function_call
from common.bot import bot
from common.dp import dp


logger = get_yandex_logger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
Configuration.configure(os.getenv("YOOKASSA_SHOP_ID"), os.getenv("YOOKASSA_SECRET_KEY"))

CREDITS_PRICE = 1000  # –¶–µ–Ω–∞ –∑–∞ 1000 –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Ä—É–±–ª—è—Ö
CREDITS_AMOUNT = 1000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É


@log_function_call(logger)
async def create_payment(user_id: int, username: Optional[str] = None) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ YooKassa –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        payment = Payment.create(
            PaymentRequest(
                {
                    "amount": {"value": str(CREDITS_PRICE), "currency": "RUB"},
                    "confirmation": {
                        "type": ConfirmationType.REDIRECT,
                        "return_url": "https://t.me/ai_spam_blocker_bot",
                    },
                    "capture": True,
                    "description": f"–ü–æ–∫—É–ø–∫–∞ {CREDITS_AMOUNT} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞",
                    "metadata": {
                        "user_id": user_id,
                        "username": username or "",
                        "credits_amount": CREDITS_AMOUNT,
                    },
                    "expires_at": (datetime.now() + timedelta(days=1)).isoformat(),
                }
            )
        )

        return payment.confirmation.confirmation_url

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None


@log_function_call(logger)
async def process_payment(payment_data: dict) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç YooKassa

    Args:
        payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç YooKassa
    """
    try:
        if payment_data["event"] == "payment.succeeded":
            payment = payment_data["object"]
            metadata = payment["metadata"]

            user_id = int(metadata["user_id"])
            credits_amount = int(metadata["credits_amount"])

            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            await add_credits(user_id, credits_amount)

            # –í–∫–ª—é—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_groups = await get_user_groups(user_id)
            for group_id in user_groups:
                await set_group_moderation(group_id, True)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(
                user_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á–µ–ª–æ–≤–µ–∫! –¢–≤–æ–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {payment['amount']['value']} "
                f"{payment['amount']['currency']} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n\n"
                f"–Ø –Ω–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ {credits_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª "
                f"–∑–∞—â–∏—Ç—É –≤ —Ç–≤–æ–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.\n\n"
                "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–µ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —É—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π! üí™",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise


@dp.message(Command("buy"))
@log_function_call(logger)
async def handle_buy_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    """

    user_id = message.from_user.id
    username = message.from_user.username

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_url = await create_payment(user_id, username)

    if payment_url:
        await bot.send_message(
            user_id,
            "üõ° –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —á–µ–ª–æ–≤–µ–∫!\n\n"
            f"–Ø –≥–æ—Ç–æ–≤ —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É —Ç–≤–æ–µ–≥–æ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∑–∞ {CREDITS_PRICE} RUB.\n"
            f"–ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å {CREDITS_AMOUNT} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –£ —Ç–µ–±—è –µ—Å—Ç—å 24 —á–∞—Å–∞.\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —è —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—Å—Ç—É–ø–ª—é –∫ —Ä–∞–±–æ—Ç–µ! ü§ñ",
            reply_markup={
                "inline_keyboard": [[{"text": "–û–ø–ª–∞—Ç–∏—Ç—å", "url": payment_url}]]
            },
        )
    else:
        await bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ "
            "–º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @leshchenko1979.",
        )


import hmac
import base64
from hashlib import sha256


def verify_yookassa_signature(body: bytes, signature: str, secret_key: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç YooKassa

    Args:
        body: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö
        signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Request-Signature
        secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ YooKassa

    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞
    """
    try:
        secret_key_bytes = secret_key.encode("utf-8")
        signature_bytes = base64.b64decode(signature)

        calculated_hash = hmac.new(secret_key_bytes, body, sha256).digest()

        return hmac.compare_digest(calculated_hash, signature_bytes)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False
